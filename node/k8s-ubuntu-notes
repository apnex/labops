swapoff -a
cat /etc/fstab
nano /etc/fstab

## software prereqs
apt -y install software-properties-common gnupg curl python

## DOCKER INSTALL
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt update
apt-cache policy docker-ce
#apt-get install docker-ce=18.06.0~ce~3-0~ubuntu
apt-get -y install docker-ce
systemctl enable docker

## K8S INSTALL [master, worker-01, worker]
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
apt-cache policy kubelet
apt-get install -y kubectl=1.14.7-00 kubeadm=1.14.7-00 kubelet=1.14.7-00

## KUBE initialize cluster on master
kubeadm init

## kubectl setup - as a regular user "ubuntu"
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

## join on worker nodes
kubeadm join ...

## load and tag ncp on all nodes
docker load -i nsx-ncp-ubuntu-3.0.1.16118386.tar
docker tag registry.local/3.0.1.16118386/nsx-ncp-ubuntu:latest nsx-ncp

## manually edit ncp-ubuntu.yaml
ConfigMap
[nsx_v3]
policy_nsxapi = True
single_tier_topology = True

cluster = k8s-cluster
   nsx_api_managers = 10.30.0.127
    nsx_api_user = admin


/infra/tier-1s/t1-mgmt
/infra/tier-0s/core-t0

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}' 
aakubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2 
https://github.com/nsxmarcos/vmworld2020.git 


apt-get install -y kubectl=1.18.8-00 kubeadm=1.18.8-00 kubelet=1.18.8-00

apt-get remove -y kubectl=1.14.7-00 kubeadm=1.14.7-00 kubelet=1.14.7-00

  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubeadm join 172.20.16.11:6443 --token ry7l9t.zouahdaj27m1apeu \
    --discovery-token-ca-cert-hash sha256:0bfcbe48dd35b261bc2fd690aabd9c6a349e0e43d36a5a8f7cdb8fbda2c21472 



## save these files
syd.lab.ovpn
mhernandez.crt
mhernandez.key
ca.crt

1) Save above files into a certificate profile to your desktop
2) Download TunnelBlick OpenVPN client for your MacOS - Latest Stable Release:
https://tunnelblick.net/

3) Install TunnelBlick, then double click on the file syd.lab.ovpn to import the profile
4) Before connecting, make sure Global Protect is disabled so it does not interfere with the LAB VPN

## geometry
lab02 is allocated 172.20.16.0/20 for external no-snat routable addressing, and has direct Internet access
10.30.0.0/24 is a strictly controlled management subnet outside NSX (on pg-mgmt) - and is routable to 172.20.16.0/20
vcenter.lab02 / nsxm.lab02 / jumphost.lab02 under separate mgmt vCenter outside of lab02

## dns/ntp
control.core.nest	10.30.0.30

## lab02 infrastructure
vcenter.lab02		10.30.0.120	administrator@vsphere.local / VMware1!SDDC
esx21.lab02		10.30.0.121	admin / VMware1!SDDC
esx22.lab02		10.30.0.122	admin / VMware1!SDDC
esx23.lab02		10.30.0.123	admin / VMware1!SDDC
esx24.lab02		10.30.0.124	admin / VMware1!SDDC
nsxm.lab02		10.30.0.127	admin / VMware1!SDDC
edge01			10.30.0.128	admin / VMware1!SDDC
jumphost.lab02		10.30.0.129	ubuntu / ubuntu

## app dns (172.20.20.x/24 allocated for External IP)
argocd.lab02		172.20.20.1
planespotter.lab02	172.20.20.8

## workloads
external-db		172.20.21.10	ubuntu / ubuntu
k8s-controller		172.20.16.11	ubuntu / ubuntu
k8s-worker-01		172.20.16.12	ubuntu / ubuntu
k8s-worker-02		172.20.16.13	ubuntu / ubuntu

## rebuild steps
kubectl apply -f ncp-ubuntu


export ARGOCD_AUTH_TOKEN=<JWT token generated from project>

export ARGOCD_SERVER=argocd.lab02
curl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
argocd app sync guestbook
argocd app wait guestbook


https://github.com/guardicore/monkey/releases/download/1.9.0/monkey-linux-64

security planning
intents
network map
